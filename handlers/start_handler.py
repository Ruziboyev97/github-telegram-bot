from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from services.user_service import UserService
from services.github_service import GitHubService

WAITING_TOKEN, BROWSING = range(2)

class StartHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    def __init__(self, user_service: UserService, github_service: GitHubService):
        self.user_service = user_service
        self.github_service = github_service
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_name = update.effective_user.first_name
        user_id = update.effective_user.id

        self.user_service.ensure_user_exists(user_id)
        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub.\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π GitHub Personal Access Token.\n\n"
            "üîë –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:\n"
            "1. github.com/settings/tokens\n"
            "2. Generate new token (classic)\n"
            "3. –í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∞: repo, delete_repo\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ\n\n"
            "üîí –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Supabase!"
        )
        return WAITING_TOKEN
    
    async def receive_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
        token = update.message.text.strip()
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await update.message.delete()
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not self.github_service.validate_token(token):
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start"
            )
            return WAITING_TOKEN
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub
        github_user = self.github_service.get_user_info(token)
        github_username = github_user['login'] if github_user else "Unknown"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)
        if self.user_service.save_token(user_id, token):
            self.user_service.log_action(user_id, 'token_saved')
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –¢–æ–∫–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Supabase!\n"
                     f"üë§ GitHub: @{github_username}\n\n"
                     "–ö–æ–º–∞–Ω–¥—ã:\n"
                     "/repos - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏\n"
                     "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                     "/delete_data - –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
                     "/help - –ü–æ–º–æ—â—å"
            )
            return BROWSING
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            )
            return WAITING_TOKEN