from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.user_service import UserService
from services.github_service import GitHubService
from config import config

class ReposHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /repos"""
    
    def __init__(self, user_service: UserService, github_service: GitHubService):
        self.user_service = user_service
        self.github_service = github_service
    
    async def show_repos(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        user_id = update.effective_user.id
        token = self.user_service.get_token(user_id)
        
        if not token:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /start")
            return
        
        await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
        
        repos = self.github_service.get_repositories(token)
        
        if not repos:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
            return
        
        self.user_service.log_action(user_id, 'view_repos')
        
        keyboard = []
        for repo in repos[:config.MAX_REPOS_DISPLAY]:
            button_text = f"üìÅ {repo['name']}"
            if repo['private']:
                button_text += " üîí"
            
            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"repo:{repo['full_name']}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üì¶ –¢–≤–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ({len(repos)}):",
            reply_markup=reply_markup
        )
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        stats = self.user_service.get_stats(user_id)
        
        text = "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        text += f"–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}\n\n"
        
        if stats['actions_by_type']:
            text += "üìà –ü–æ —Ç–∏–ø–∞–º:\n"
            for action_type, count in stats['actions_by_type'].items():
                emoji = self._get_action_emoji(action_type)
                text += f"{emoji} {action_type}: {count}\n"
        
        if stats['recent_actions']:
            text += f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            for action in stats['recent_actions'][:5]:
                text += f"‚Ä¢ {action['action_type']}"
                if action.get('repo_name'):
                    text += f" ({action['repo_name']})"
                text += "\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        total_users = self.user_service.get_users_count()
        text += f"\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {total_users}"
        
        await update.message.reply_text(text)
    
    def _get_action_emoji(self, action_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        emojis = {
            'token_saved': 'üîë',
            'view_repos': 'üì¶',
            'open_repo': 'üìÅ',
            'open_folder': 'üìÇ',
            'view_file': 'üìÑ',
            'delete_file': 'üóë',
            'create_file': '‚ûï'
        }
        return emojis.get(action_type, '‚Ä¢')
    
    async def delete_user_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if self.user_service.delete_user(user_id):
            await update.message.reply_text(
                "‚úÖ –í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ Supabase.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            )